// Projeto de Controle de Robô com Gamepad
// Desenvolvido pelo Professor Thiago Antonio Marcão para a Escola Otalipío.

// Definições personalizadas para o uso do Dabble
#define CUSTOM_SETTINGS

// Incluir o módulo GamePad do Dabble
#define INCLUDE_GAMEPAD_MODULE
#include <Dabble.h>

// Definições dos pinos utilizados
#define INT1 2         // Pino de controle do motor esquerdo para frente
#define INT2 3         // Pino de controle do motor direito para frente
#define INT3 4         // Pino de controle do motor esquerdo para trás
#define INT4 5         // Pino de controle do motor direito para trás
#define LED_PIN_11 11  // Pino do LED 11
#define LED_PIN_12 12  // Pino do LED 12
#define LED_PIN_13 13  // Pino do LED 13
#define BUZZER_PIN 9   // Pino do buzzer

// Sequência de frequências para o som de motor parado
int idleSound[] = {50, 100, 150, 200};  // Frequências do som de motor parado
int idleSoundLength = 4;                 // Número total de frequências na sequência
int idleSoundIndex = 0;                  // Índice da próxima frequência a ser tocada

void setup()
{
  // Inicialização da comunicação serial
  Serial.begin(250000);

  // Inicialização do módulo Dabble
  Dabble.begin(9600, 7, 6);

  // Configuração dos pinos como saída
  pinMode(INT1, OUTPUT);
  pinMode(INT2, OUTPUT);
  pinMode(INT3, OUTPUT);
  pinMode(INT4, OUTPUT);
  pinMode(LED_PIN_11, OUTPUT);
  pinMode(LED_PIN_12, OUTPUT);
  pinMode(LED_PIN_13, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT); // Configuração do pino do buzzer

  // Parar o carro no início
  stopCar();
}

void loop()
{
  // Processar entradas do Dabble
  Dabble.processInput();

  // Verificar botões pressionados
  if (GamePad.isUpPressed())
  {
    moveForward();           // Mover para frente
    tone(BUZZER_PIN, 1000);  // Emitir som para a frente
  }
  else if (GamePad.isDownPressed())
  {
    moveBackward();          // Mover para trás
    tone(BUZZER_PIN, 500);   // Emitir som para trás
  }
  else if (GamePad.isLeftPressed())
  {
    turnLeft();              // Virar à esquerda
    tone(BUZZER_PIN, 750);   // Emitir som para a esquerda
  }
  else if (GamePad.isRightPressed())
  {
    turnRight();             // Virar à direita
    tone(BUZZER_PIN, 1250);  // Emitir som para a direita
  }
  else
  {
    stopCar();               // Parar o carro
    playIdleSound();         // Emitir som de motor parado
  }
  
  // Manter os LEDs acesos constantemente
  digitalWrite(LED_PIN_12, HIGH);  // Acender LED_PIN_12 sempre
  digitalWrite(LED_PIN_13, HIGH);  // Acender LED_PIN_13 sempre
}

// Função para mover o carro para frente
void moveForward()
{
  digitalWrite(INT1, LOW);   // Desligar motor esquerdo para frente
  digitalWrite(INT2, HIGH);  // Ligar motor direito para frente
  digitalWrite(INT3, HIGH);  // Ligar motor esquerdo para frente
  digitalWrite(INT4, LOW);   // Desligar motor direito para frente
}

// Função para mover o carro para trás
void moveBackward()
{
  digitalWrite(INT1, HIGH);  // Ligar motor esquerdo para trás
  digitalWrite(INT2, LOW);   // Desligar motor direito para trás
  digitalWrite(INT3, LOW);   // Desligar motor esquerdo para trás
  digitalWrite(INT4, HIGH);  // Ligar motor direito para trás
}

// Função para virar o carro à esquerda
void turnLeft()
{
  digitalWrite(INT1, HIGH);  // Ligar motor esquerdo para trás
  digitalWrite(INT2, LOW);   // Desligar motor direito para frente
  digitalWrite(INT3, HIGH);  // Ligar motor esquerdo para frente
  digitalWrite(INT4, LOW);   // Desligar motor direito para trás
}

// Função para virar o carro à direita
void turnRight()
{
  digitalWrite(INT1, LOW);   // Desligar motor esquerdo para frente
  digitalWrite(INT2, HIGH);  // Ligar motor direito para trás
  digitalWrite(INT3, LOW);   // Desligar motor esquerdo para trás
  digitalWrite(INT4, HIGH);  // Ligar motor direito para frente
}

// Função para parar o carro
void stopCar()
{
  digitalWrite(INT1, LOW);   // Desligar todos os motores
  digitalWrite(INT2, LOW);
  digitalWrite(INT3, LOW);
  digitalWrite(INT4, LOW);
  noTone(BUZZER_PIN);        // Parar o som do buzzer
}

// Função para reproduzir o som de motor parado
void playIdleSound()
{
  tone(BUZZER_PIN, idleSound[idleSoundIndex]);  // Emitir a próxima frequência
  idleSoundIndex = (idleSoundIndex + 1) % idleSoundLength;  // Atualizar o índice
  delay(150);  // Tempo entre cada tom do som de motor parado
}

